-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Grammar/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pFormula -> Formula                         (0)
	Prop -> L_Prop                                     (1)
	Formula -> 'true'                                  (2)
	Formula -> 'false'                                 (3)
	Formula -> Prop                                    (4)
	Formula -> '~' Formula                             (5)
	Formula -> '(' Formula '&' Formula ')'             (6)
	Formula -> '(' Formula 'v' Formula ')'             (7)
	Formula -> '(' Formula '->' Formula ')'            (8)
	Formula -> '(' Formula '<->' Formula ')'           (9)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'&'            { PT _ (TS _ 1) }
	'('            { PT _ (TS _ 2) }
	')'            { PT _ (TS _ 3) }
	'->'           { PT _ (TS _ 4) }
	'<->'          { PT _ (TS _ 5) }
	'false'        { PT _ (TS _ 6) }
	'true'         { PT _ (TS _ 7) }
	'v'            { PT _ (TS _ 8) }
	'~'            { PT _ (TS _ 9) }
	L_Prop         { PT _ (T_Prop $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pFormula rule  0
	Prop            rule  1
	Formula         rules 2, 3, 4, 5, 6, 7, 8, 9

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pFormula -> . Formula                        (rule 0)

	'('            shift, and enter state 5
	'false'        shift, and enter state 6
	'true'         shift, and enter state 7
	'~'            shift, and enter state 8
	L_Prop         shift, and enter state 2

	Prop           goto state 3
	Formula        goto state 4

State 1

	Prop -> . L_Prop                                    (rule 1)

	L_Prop         shift, and enter state 2


State 2

	Prop -> L_Prop .                                    (rule 1)

	'&'            reduce using rule 1
	')'            reduce using rule 1
	'->'           reduce using rule 1
	'<->'          reduce using rule 1
	'v'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	Formula -> Prop .                                   (rule 4)

	'&'            reduce using rule 4
	')'            reduce using rule 4
	'->'           reduce using rule 4
	'<->'          reduce using rule 4
	'v'            reduce using rule 4
	%eof           reduce using rule 4


State 4

	%start_pFormula -> Formula .                        (rule 0)

	%eof           accept


State 5

	Formula -> '(' . Formula '&' Formula ')'            (rule 6)
	Formula -> '(' . Formula 'v' Formula ')'            (rule 7)
	Formula -> '(' . Formula '->' Formula ')'           (rule 8)
	Formula -> '(' . Formula '<->' Formula ')'          (rule 9)

	'('            shift, and enter state 5
	'false'        shift, and enter state 6
	'true'         shift, and enter state 7
	'~'            shift, and enter state 8
	L_Prop         shift, and enter state 2

	Prop           goto state 3
	Formula        goto state 10

State 6

	Formula -> 'false' .                                (rule 3)

	'&'            reduce using rule 3
	')'            reduce using rule 3
	'->'           reduce using rule 3
	'<->'          reduce using rule 3
	'v'            reduce using rule 3
	%eof           reduce using rule 3


State 7

	Formula -> 'true' .                                 (rule 2)

	'&'            reduce using rule 2
	')'            reduce using rule 2
	'->'           reduce using rule 2
	'<->'          reduce using rule 2
	'v'            reduce using rule 2
	%eof           reduce using rule 2


State 8

	Formula -> '~' . Formula                            (rule 5)

	'('            shift, and enter state 5
	'false'        shift, and enter state 6
	'true'         shift, and enter state 7
	'~'            shift, and enter state 8
	L_Prop         shift, and enter state 2

	Prop           goto state 3
	Formula        goto state 9

State 9

	Formula -> '~' Formula .                            (rule 5)

	'&'            reduce using rule 5
	')'            reduce using rule 5
	'->'           reduce using rule 5
	'<->'          reduce using rule 5
	'v'            reduce using rule 5
	%eof           reduce using rule 5


State 10

	Formula -> '(' Formula . '&' Formula ')'            (rule 6)
	Formula -> '(' Formula . 'v' Formula ')'            (rule 7)
	Formula -> '(' Formula . '->' Formula ')'           (rule 8)
	Formula -> '(' Formula . '<->' Formula ')'          (rule 9)

	'&'            shift, and enter state 11
	'->'           shift, and enter state 12
	'<->'          shift, and enter state 13
	'v'            shift, and enter state 14


State 11

	Formula -> '(' Formula '&' . Formula ')'            (rule 6)

	'('            shift, and enter state 5
	'false'        shift, and enter state 6
	'true'         shift, and enter state 7
	'~'            shift, and enter state 8
	L_Prop         shift, and enter state 2

	Prop           goto state 3
	Formula        goto state 18

State 12

	Formula -> '(' Formula '->' . Formula ')'           (rule 8)

	'('            shift, and enter state 5
	'false'        shift, and enter state 6
	'true'         shift, and enter state 7
	'~'            shift, and enter state 8
	L_Prop         shift, and enter state 2

	Prop           goto state 3
	Formula        goto state 17

State 13

	Formula -> '(' Formula '<->' . Formula ')'          (rule 9)

	'('            shift, and enter state 5
	'false'        shift, and enter state 6
	'true'         shift, and enter state 7
	'~'            shift, and enter state 8
	L_Prop         shift, and enter state 2

	Prop           goto state 3
	Formula        goto state 16

State 14

	Formula -> '(' Formula 'v' . Formula ')'            (rule 7)

	'('            shift, and enter state 5
	'false'        shift, and enter state 6
	'true'         shift, and enter state 7
	'~'            shift, and enter state 8
	L_Prop         shift, and enter state 2

	Prop           goto state 3
	Formula        goto state 15

State 15

	Formula -> '(' Formula 'v' Formula . ')'            (rule 7)

	')'            shift, and enter state 22


State 16

	Formula -> '(' Formula '<->' Formula . ')'          (rule 9)

	')'            shift, and enter state 21


State 17

	Formula -> '(' Formula '->' Formula . ')'           (rule 8)

	')'            shift, and enter state 20


State 18

	Formula -> '(' Formula '&' Formula . ')'            (rule 6)

	')'            shift, and enter state 19


State 19

	Formula -> '(' Formula '&' Formula ')' .            (rule 6)

	'&'            reduce using rule 6
	')'            reduce using rule 6
	'->'           reduce using rule 6
	'<->'          reduce using rule 6
	'v'            reduce using rule 6
	%eof           reduce using rule 6


State 20

	Formula -> '(' Formula '->' Formula ')' .           (rule 8)

	'&'            reduce using rule 8
	')'            reduce using rule 8
	'->'           reduce using rule 8
	'<->'          reduce using rule 8
	'v'            reduce using rule 8
	%eof           reduce using rule 8


State 21

	Formula -> '(' Formula '<->' Formula ')' .          (rule 9)

	'&'            reduce using rule 9
	')'            reduce using rule 9
	'->'           reduce using rule 9
	'<->'          reduce using rule 9
	'v'            reduce using rule 9
	%eof           reduce using rule 9


State 22

	Formula -> '(' Formula 'v' Formula ')' .            (rule 7)

	'&'            reduce using rule 7
	')'            reduce using rule 7
	'->'           reduce using rule 7
	'<->'          reduce using rule 7
	'v'            reduce using rule 7
	%eof           reduce using rule 7


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 10
Number of terminals: 10
Number of non-terminals: 3
Number of states: 23
