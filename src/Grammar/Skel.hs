-- File generated by the BNF Converter (bnfc 2.9.3).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Grammar.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Grammar.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transProp :: Grammar.Abs.Prop -> Result
transProp x = case x of
  Grammar.Abs.Prop string -> failure x

transFormula :: Grammar.Abs.Formula -> Result
transFormula x = case x of
  Grammar.Abs.Top -> failure x
  Grammar.Abs.Bot -> failure x
  Grammar.Abs.Atom prop -> failure x
  Grammar.Abs.Not formula -> failure x
  Grammar.Abs.And formula1 formula2 -> failure x
  Grammar.Abs.Or formula1 formula2 -> failure x
  Grammar.Abs.Imp formula1 formula2 -> failure x
  Grammar.Abs.Iff formula1 formula2 -> failure x
