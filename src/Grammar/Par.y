-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.3).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Grammar.Par
  ( happyError
  , myLexer
  , pFormula
  ) where

import Prelude

import qualified Grammar.Abs
import Grammar.Lex

}

%name pFormula Formula
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '&'     { PT _ (TS _ 1)    }
  '('     { PT _ (TS _ 2)    }
  ')'     { PT _ (TS _ 3)    }
  '->'    { PT _ (TS _ 4)    }
  '<->'   { PT _ (TS _ 5)    }
  'false' { PT _ (TS _ 6)    }
  'true'  { PT _ (TS _ 7)    }
  'v'     { PT _ (TS _ 8)    }
  '~'     { PT _ (TS _ 9)    }
  L_Prop  { PT _ (T_Prop $$) }

%%

Prop :: { Grammar.Abs.Prop }
Prop  : L_Prop { Grammar.Abs.Prop $1 }

Formula :: { Grammar.Abs.Formula }
Formula
  : 'true' { Grammar.Abs.Top }
  | 'false' { Grammar.Abs.Bot }
  | Prop { Grammar.Abs.Atom $1 }
  | '~' Formula { Grammar.Abs.Not $2 }
  | '(' Formula '&' Formula ')' { Grammar.Abs.And $2 $4 }
  | '(' Formula 'v' Formula ')' { Grammar.Abs.Or $2 $4 }
  | '(' Formula '->' Formula ')' { Grammar.Abs.Imp $2 $4 }
  | '(' Formula '<->' Formula ')' { Grammar.Abs.Iff $2 $4 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

